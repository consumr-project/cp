#!/usr/bin/env node

const program = require('commander');
const config = require('acm');
const faker = require('faker');
const uuid = require('uuid');

const gen_conn = require('../build/service/query/conn').default;
const gen_models = require('../build/service/query/models').default;

const Models = gen_models(gen_conn());
const User = Models.User;
const Review = Models.Review;
const Tag = Models.Tag;
const Product = Models.Product;

function msg_success(label) {
    return function () {
        console.log('succesfully created %s', label);
        process.exit();
    };
}

function msg_error(label) {
    return function (err) {
        console.log('error creating %s', label);
        console.dir(err);
        process.exit(1);
    };
}

program
    .command('app:user')
    .description('generate base user')
    .action(() => {
        var user = config('seed.user.root');

        console.log('ensuring user#%s exists', user.id);
        User.findOrCreate({
            defaults: user,
            where: { id: user.id },
        })
            .then(msg_success('app user'))
            .catch(msg_error('app user'));
    });

program
    .command('app:products')
    .description('generate base tags')
    .action(() => {
        var products = config('seed.products');

        Promise.all(products.map(product =>
            Product.findOrCreate({
                where: { id: product.id },
                defaults: product,
            })))
                .then(msg_success('app products'))
                .catch(msg_error('app products'));
    });

program
    .command('app:tags')
    .description('generate base tags')
    .action(() => {
        var tags = config('seed.tags');

        Promise.all(tags.map(tag =>
            Tag.findOrCreate({
                where: { id: tag.id },
                defaults: tag,
            })))
                .then(msg_success('app tags'))
                .catch(msg_error('app tags'));
    });

program
    .command('test:user')
    .description('generate a test user')
    .action(() => {
        var user = config('fixtures.user.admin');

        console.log('ensuring user#%s exists', user.id);
        User.findOrCreate({
            defaults: user,
            where: { id: user.id },
        })
            .then(msg_success('test user'))
            .catch(msg_error('test user'));
    });

program
    .command('review')
    .option('--company-id [id]', 'ID of the company to add review to')
    .option('--user-id [id]', 'ID of the user to add create review as')
    .description('generate a random review for a company')
    .action((cmd) => {
        var user = config('fixtures.user.admin');

        Review.create({
            id: uuid.v4(),
            user_id: cmd.userId,
            company_id: cmd.companyId,
            score: faker.random.number({ max: 5 }).toString(),
            title: faker.company.companyName() + ' has ' + faker.company.bs(),
            summary: faker.lorem.paragraphs(2),
            created_by: user.id,
            updated_by: user.id,
            created_date: Date.now(),
            updated_date: Date.now(),
        })
            .then(msg_success('review'))
            .catch(msg_error('review'));
    });

program.parse(process.argv);
