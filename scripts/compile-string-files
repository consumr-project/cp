#!/usr/bin/env node

'use strict';

const MessageFormat = require('messageformat').MessageFormat;
const program = require('commander');

const path = require('path');
const fs = require('fs');
const yaml = require('yamljs');
const glob = require('glob');
const each = require('lodash/collection/each');

program
    .option('-l --locale <name>', 'name of the locale to compile')
    .option('-v --var <name>', 'i18n variable name', 'i18n');

program
    .command('functions')
    .description('generate the base i18n variable')
    .action(command_functions);

program
    .command('generate')
    .description('generate locale strings object')
    .option('--strings_file <file>', 'strings file match')
    .option('--strings_extra <str>', 'strings file non-file name match')
    .action(command_generate);

/**
 * @param {String} locale
 * @return {String}
 */
function real_locale(locale) {
    return locale === 'lolcat' ? 'en' : locale;
}

/**
 * @return {void}
 */
function command_functions() {
    var mf = new MessageFormat(real_locale(program.locale));
    console.log('window.%s = %s;', program['var'], mf.functions());
    console.log('window.%s.get = %s;', program['var'], i18n_get_function.toString());
}

/**
 * @param {Object} options
 * @return {void}
 */
function command_generate(options) {
    var mf = new MessageFormat(real_locale(program.locale));
    glob(options.strings_file, function (err, files) {
        each(files, function (file) {
            var name = generate_section_name(file, options.strings_extra),
                contents = fs.readFileSync(file).toString(),
                parsed = yaml.parse(contents);

            console.log('%s["%s"] =', program['var'], name);
            console.log(mf.precompileObject(parsed));
            console.log(';');
        });
    });
}

/**
 * helper function which is stringified and used by the web client
 * @param {String} path
 * @param {Object} data
 * @return {String}
 */
function i18n_get_function (path, data) {
    var parts = path.split('/'),
        fn = parts.pop(),
        name = parts.join('/');

    if (!(fn in this[name])) {
        throw new Error('i18n key does not exists: ' + path);
    }

    return this[name][fn](data);
}

/**
 * converts config/i18n/en/common.yml to common
 * @param {String} file
 * @param {String} exit
 * @return {String}
 */
function generate_section_name(file, extra) {
    return file
        .substr(0, file.lastIndexOf('.'))
        .replace(extra, '');
}

program.parse(process.argv);
