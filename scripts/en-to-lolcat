#!/usr/bin/env node

'use strict';

const IN_FILES = './config/i18n/en/*';
const OUT_DIR = './config/i18n/lolcat/';

const REG_FIELDS = /(\{.+?\})/g;
const API_URL = 'http://speaklolcat.com/?';

const cheerio = require('cheerio');
const read = require('fs').readFileSync;
const write = require('fs').writeFileSync;
const request = require('request');
const glob = require('glob');
const colors = require('colors/safe');
const querystring = require('querystring');
const path = require('path');
const yaml = require('yamljs');
const async = require('async');
const each = require('lodash/collection/each');
const map = require('lodash/collection/map');

glob(IN_FILES, function (err, files) {
    var translations = {};

    async.whilst(
        // whilst we have files left to process
        () => files.length,

        // parse yaml files and fetch translations
        done => {
            var file = files.pop(),
                file_name = path.basename(file),
                contents = '';

            clear_and_write(` ${colors.yellow('-')} translating ${file}`);
            contents = yaml.parse(read(file).toString());
            translations[file_name] = {};

            async.parallel(
                // get translations for every key
                map(contents, (val, key) =>
                    callback => {
                        request({
                            url: API_URL + querystring.stringify({
                                from: val
                            })
                        }, (err, res, body) => {
                            translations[file_name][key] = parse_translation(body, val);
                            callback();
                        });
                    }),

                // all done fetching translations
                err => {
                    clear_and_write(` ${colors.green('+')} ${file} translated\n`);
                    done();
                }
            );
        },

        // all done. write translation files
        err => {
            each(translations, (contents, file) => {
                var file_path = path.join(OUT_DIR, file);
                clear_and_write(` ${colors.yellow('-')} saving ${file_path}`);
                write(file_path, yaml.stringify(contents));
                clear_and_write(` ${colors.green('+')} ${file_path} saved\n`);
            });
        }
    );
});

/**
 * @param {String} line
 * @return {void}
 */
function clear_and_write(line) {
    if (process.stdout && process.stdout.clearLine) {
        process.stdout.clearLine();
        process.stdout.cursorTo(0);
        process.stdout.write(line);
    }
}

/**
 * @param {String} html
 * @param {String} original
 * @return {String}
 */
function parse_translation(html, original) {
    var translated = cheerio.load(html)('#to').text().toLowerCase(),
        new_fields = translated.match(REG_FIELDS),
        orig_fields = original.match(REG_FIELDS);

    // orignal merge fields
    each(new_fields, (field, i) =>
        translated = translated.replace(field, orig_fields[i]));

    // special cases
    translated = translated.replace(/othr/g, 'other');

    return translated;
}
