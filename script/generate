#!/usr/bin/env node

const program = require('commander');
const config = require('acm');
const faker = require('faker');
const uuid = require('uuid');

const KEY_USER_EMAIL = require('../build/keys').KEY_USER_EMAIL;

const crypto = require('../build/crypto');
const connect = require('../build/device/dbms').default;
const gen_models = require('../build/record/models').default;

const Models = gen_models(connect());
const User = Models.User;
const Review = Models.Review;
const Question = Models.Question;
const Tag = Models.Tag;
const Product = Models.Product;

function msg_success(label) {
    return function () {
        console.log('succesfully created %s', label);
        process.exit();
    };
}

function msg_error(label) {
    return function (err) {
        console.log('error creating %s', label);
        console.dir(err);
        process.exit(1);
    };
}

function msg_ed(label, work) {
    work.then(msg_success(label))
        .catch(msg_error(label));
}

program
    .command('app:user')
    .description('generate base user')
    .action(() => {
        var user = config('seed.user.root');
        user.email = crypto.encrypt(user.raw_email, KEY_USER_EMAIL);

        console.log('ensuring user#%s exists', user.id);
        msg_ed('app user', User.findOrCreate({
            defaults: user,
            where: { id: user.id },
        }));
    });

program
    .command('app:products')
    .description('generate base tags')
    .action(() => {
        var products = config('seed.products');

        msg_ed('app products', Promise.all(products.map(product =>
            Product.findOrCreate({
                where: { id: product.id },
                defaults: product,
            }))));
    });

program
    .command('app:tags')
    .description('generate base tags')
    .action(() => {
        var tags = config('seed.tags');

        msg_ed('app tags', Promise.all(tags.map(tag =>
            Tag.findOrCreate({
                where: { id: tag.id },
                defaults: tag,
            }))));
    });

program
    .command('test:user')
    .description('generate a test user')
    .action(() => {
        var user = config('fixtures.user.admin');
        user.email = crypto.encrypt(user.raw_email, KEY_USER_EMAIL);

        console.log('ensuring user#%s exists', user.id);
        msg_ed('test user', User.findOrCreate({
            defaults: user,
            where: { id: user.id },
        }));
    });

program
    .command('question')
    .option('--company-id [id]', 'ID of the company to add review to')
    .option('--user-id [id]', 'ID of the user to add create review as')
    .description('generate a random question for a company')
    .action((cmd) => {
        var user = config('fixtures.user.admin');

        msg_ed('question', Question.create({
            id: uuid.v4(),
            user_id: cmd.userId,
            company_id: cmd.companyId,
            title: 'Is ' + faker.company.companyName() + ' really ' + faker.company.bs(),
            answer: faker.lorem.paragraphs(2),
            answered_by: cmd.userId,
            answered_date: Date.now(),
            created_by: cmd.userId,
            updated_by: cmd.userId,
            created_date: Date.now(),
            updated_date: Date.now(),
        }));
    });

program
    .command('review')
    .option('--company-id [id]', 'ID of the company to add review to')
    .option('--user-id [id]', 'ID of the user to add create review as')
    .description('generate a random review for a company')
    .action((cmd) => {
        var user = config('fixtures.user.admin');

        msg_ed('review', Review.create({
            id: uuid.v4(),
            user_id: cmd.userId,
            company_id: cmd.companyId,
            score: faker.random.number({ max: 5 }).toString(),
            title: faker.company.companyName() + ' has ' + faker.company.bs(),
            summary: faker.lorem.paragraphs(2),
            created_by: user.id,
            updated_by: user.id,
            created_date: Date.now(),
            updated_date: Date.now(),
        }));
    });

program.parse(process.argv);
