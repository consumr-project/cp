#!/usr/bin/env node

'use strict';

const LOL_IN_FILES = './config/i18n/en/*';
const LOL_OUT_DIR = './config/i18n/lolcat-US/';
const LOL_API_URL = 'http://speaklolcat.com/?';
const REG_FIELDS = /(\{.+?\})/g;

const MessageFormat = require('messageformat');
const program = require('commander');

const path = require('path');
const fs = require('fs');
const yaml = require('yamljs');
const glob = require('glob');
const each = require('lodash/each');
const get = require('lodash/get');

const cheerio = require('cheerio');
const read = require('fs').readFileSync;
const write = require('fs').writeFileSync;
const request = require('request');
const colors = require('colors/safe');
const querystring = require('querystring');
const async = require('async');
const map = require('lodash/map');

/**
 * @param {String} locale
 * @return {String}
 */
function real_locale(locale) {
    return locale === 'lolcat-US' ? 'en-US' : locale;
}

/**
 * @return {void}
 */
function command_lolcat() {
    glob(LOL_IN_FILES, function (err, files) {
        var translations = {};

        async.whilst(
            // whilst we have files left to process
            () => files.length,

            // parse yaml files and fetch translations
            done => {
                var file = files.pop(),
                    file_name = path.basename(file),
                    contents = '';

                clear_and_write(` ${colors.yellow('-')} translating ${file}`);
                contents = yaml.parse(read(file).toString());
                translations[file_name] = {};

                // pre-set keys to keep order
                map(contents, (val, key) =>
                    translations[file_name][key] = null);

                async.parallel(
                    // get translations for every key
                    map(contents, (val, key) =>
                        callback => {
                            request({
                                url: LOL_API_URL + querystring.stringify({
                                    from: val
                                })
                            }, (err, res, body) => {
                                translations[file_name][key] = parse_translation(body, val);
                                callback();
                            });
                        }),

                    // all done fetching translations
                    err => {
                        clear_and_write(` ${colors.green('+')} ${file} translated\n`);
                        done();
                    }
                );
            },

            // all done. write translation files
            err => {
                each(translations, (contents, file) => {
                    var file_path = path.join(LOL_OUT_DIR, file);
                    clear_and_write(` ${colors.yellow('-')} saving ${file_path}`);
                    write(file_path, yaml.stringify(contents));
                    clear_and_write(` ${colors.green('+')} ${file_path} saved\n`);
                });
            }
        );
    });
}

function gen_mf() {
    return new MessageFormat(real_locale(program.locale), null, {
        date: MessageFormat.formatters.date
    });
}

/**
 * @param {Object} options
 * @return {void}
 */
function command_generate(options) {
    var mf = gen_mf(),
        name = options.is_default ? 'def_strings' : 'strings';

    glob(options.strings_file, function (err, files) {
        var messages = {};

        each(files, function (file) {
            var name = generate_section_name(file, options.strings_extra),
                contents = fs.readFileSync(file).toString(),
                parsed = yaml.parse(contents);

            messages[name] = parsed;
        });

        console.log('(function (global) {');
        console.log('var store = global.%s || {};', program['var']);
        console.log('global.%s = (global.module || {}).exports = store;', program['var']);
        console.log('store.get = %s;', i18n_get_function.toString());
        console.log('store.%s = (%s)();', name, mf.compile(messages).toString());
        console.log('})(this)');
    });
}

/**
 * helper function which is stringified and used by the web client
 * @param {String} path
 * @param {Object} data
 * @return {String}
 */
function i18n_get_function(path, data) {
    var parts = path.split('/');

    var get = function (holder, path) {
        var val = holder;

        for (var i = 0, len = path.length; i < len; i++) {
            if (!val) {
                return;
            }

            val = val[path[i]];
        }

        return val;
    };

    var generator = get(this.strings, parts) ||
        get(this.def_strings, parts);

    if (!generator) {
        throw new Error('i18n key does not exists: ' + path);
    }

    return generator(data);
}

/**
 * converts config/i18n/en/common.yml to common
 * @param {String} file
 * @param {String} exit
 * @return {String}
 */
function generate_section_name(file, extra) {
    return file
        .substr(0, file.lastIndexOf('.'))
        .replace(extra, '');
}

/**
 * @param {String} line
 * @return {void}
 */
function clear_and_write(line) {
    if (process.stdout && process.stdout.clearLine) {
        process.stdout.clearLine();
        process.stdout.cursorTo(0);
        process.stdout.write(line);
    }
}

/**
 * @param {String} html
 * @param {String} original
 * @return {String}
 */
function parse_translation(html, original) {
    var translated = cheerio.load(html)('#to').text().toLowerCase(),
        new_fields = translated.match(REG_FIELDS),
        orig_fields = original.match(REG_FIELDS);

    // orignal merge fields
    each(new_fields, (field, i) =>
        translated = translated.replace(field, orig_fields[i]));

    // special cases
    translated = translated.replace(/othr/g, 'other');

    return translated;
}

program
    .option('-l --locale <name>', 'name of the locale to compile')
    .option('-v --var <name>', 'i18n variable name', 'i18n');

program
    .command('generate')
    .description('generate locale strings object')
    .option('--strings_file <file>', 'strings file match')
    .option('--strings_extra <str>', 'strings file non-file name match')
    .option('--is_default', 'compile as default strings?')
    .action(command_generate);

program
    .command('lolcat')
    .description('get a lolcat translation of all english entries')
    .action(command_lolcat);

program.parse(process.argv);
